services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 250
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data

  milvus:
    image: milvusdb/milvus:v2.4.4
    container_name: milvus
    ports:
      - "19530:19530"   # gRPC / PyMilvus
      - "9091:9091"     # REST / healthz
    environment:
      TZ: UTC
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - milvus_data:/var/lib/milvus

  node-red:
    image: nodered/node-red:3.1.0
    container_name: node-red
    ports:
      - "1880:1880"
    env_file:
      - .env
    environment:
      - TZ=UTC
    volumes:
      - ./node-red/data:/data
    depends_on:
      - kafka

  consumer:
    build:
      context: ./consumer
    container_name: consumer
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - kafka
      - milvus

  dashboard:
    image: python:3.10-slim
    container_name: dashboard
    working_dir: /app
    volumes:
      - ./dashboard:/app
    command: >-
      sh -c "pip install --no-cache-dir -r requirements.txt && \
             streamlit run app.py --server.port 8501 --server.address 0.0.0.0"
    env_file:
      - .env
    ports:
      - "8501:8501"
    depends_on:
      - milvus

volumes:
  zookeeper_data:
  kafka_data:
  milvus_data: